spring:
  profiles:
    active: dev
  application:
    name: bi
  cloud:
    nacos:
      server-addr: 10.81.128.50:8848
      config:
        refresh-enabled: true
        group: bi
        shared-configs[0]:
          data-id: custom-common.properties
          refresh: true
server:
  port: 9002
  servlet:
    context-path: /bi
logging:
  config: classpath:log4j2.xml

#health endpoint\u662F\u5426\u5FC5\u987B\u663E\u793A\u5168\u90E8\u7EC6\u8282\u3002\u9ED8\u8BA4\u60C5\u51B5\u4E0B, /actuator/health \u662F\u516C\u5F00\u7684\uFF0C\u5E76\u4E14\u4E0D\u663E\u793A\u7EC6\u8282\u3002
management:
  endpoint:
    health:
      show-details: always
  endpoints:
    web:
      exposure:
        include: '*'
        exclude: env,configprops
---
# dev
spring:
  profiles: dev
  cloud:
    nacos:
      discovery:
        namespace: 4ca94aea-b5b1-486f-80da-debf7d622bdc
      config:
        namespace: 4ca94aea-b5b1-486f-80da-debf7d622bdc

---
# uat
spring:
  profiles: uat
  cloud:
    nacos:
      discovery:
        namespace: df9e72bd-966d-4673-9e4f-12a4b08b74ca
      config:
        namespace: df9e72bd-966d-4673-9e4f-12a4b08b74ca

---
# demo
spring:
  profiles: demo
  cloud:
    nacos:
      discovery:
        namespace: f8b196e0-5ce5-41dc-abe8-e05973684c98
      config:
        namespace: f8b196e0-5ce5-41dc-abe8-e05973684c98

---
# prod
spring:
  profiles: prod
  cloud:
    nacos:
      discovery:
        namespace: a7dc2813-4e2f-485d-b629-689ced735a24
      config:
        namespace: a7dc2813-4e2f-485d-b629-689ced735a24

---
# hktest
spring:
  profiles: hktest
  cloud:
    nacos:
      server-addr: 10.240.32.68:8848
      discovery:
        namespace: c2b05136-7923-46db-bebb-b3bc8690464c
      config:
        namespace: c2b05136-7923-46db-bebb-b3bc8690464c

---
# hkprod
spring:
  profiles: hkprod
  cloud:
    nacos:
      server-addr: 10.240.32.68:8848
      discovery:
        namespace: ea321df0-d151-42d4-a566-31fa9844074b
      config:
        namespace: ea321df0-d151-42d4-a566-31fa9844074b

---
#kafka
spring:
  kafka:
    bootstrap-servers: 10.81.128.74:9092,10.81.128.75:9092,10.81.128.76:9092
    template:      default-topic: bi_sync_dev
    producer:
      # 发生错误后，消息重发的次数。
      retries: 0
      #当有多个消息需要被发送到同一个分区时，生产者会把它们放在同一个批次里。该参数指定了一个批次可以使用的内存大小，按照字节数计算。
      batch-size: 16384
      # 设置生产者内存缓冲区的大小。
      buffer-memory: 33554432
      # 键的序列化方式
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      # 值的序列化方式
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      # acks=0 ： 生产者在成功写入消息之前不会等待任何来自服务器的响应。
      # acks=1 ： 只要集群的首领节点收到消息，生产者就会收到一个来自服务器成功响应。
      # acks=all ：只有当所有参与复制的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应。
      acks: 1
    consumer:
      group-id: bi_sync
      # 自动提交的时间间隔 在spring boot 2.X 版本中这里采用的是值的类型为Duration 需要符合特定的格式，如1S,1M,2H,5D
      auto-commit-interval: 1S
      # 该属性指定了消费者在读取一个没有偏移量的分区或者偏移量无效的情况下该作何处理：
      # latest（默认值）在偏移量无效的情况下，消费者将从最新的记录开始读取数据（在消费者启动之后生成的记录）
      # earliest ：在偏移量无效的情况下，消费者将从起始位置读取分区的记录
      auto-offset-reset: earliest
      # 是否自动提交偏移量，默认值是true,为了避免出现重复数据和数据丢失，可以把它设置为false,然后手动提交偏移量
      enable-auto-commit: false
      # 键的反序列化方式
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      # 值的反序列化方式
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    listener:
      # 在侦听器容器中运行的线程数。
      concurrency: 5
      #listner负责ack，每调用一次，就立即commit
#      ack-mode: manual_immediate
      ack-mode: manual-immediate
      missing-topics-fatal: false